<div class="col-span-1 h-96" id="megaminx-container">
    <h1 class="text-2xl md:text-3xl text-center mx-auto font-extrabold m-0 translate-y-10">Megaminx</h1>
</div>
<script>
    import * as THREE from "three";
    import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";

    const $cubes = document.getElementById("megaminx-container");

    if ($cubes) {
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000);

        const renderer = new THREE.WebGLRenderer();
        renderer.setClearColor(0xffffff, 0);

        $cubes.appendChild(renderer.domElement);
        const loader = new GLTFLoader();
        let models: THREE.Object3D[] = [];

        const ambientLight = new THREE.AmbientLight(0xffffff);
        ambientLight.intensity = 3;
        scene.add(ambientLight);

        function loadModel(path: string, position: number[], scale: number[]) {
            loader.load(path, (gltf) => {
                const model = gltf.scene;
                if (model) {
                    model.position.set(position[0], position[1], position[2]);
                    model.scale.set(scale[0], scale[1], scale[2]);
                    models.push(model);
                    scene.add(model);
                }
            });
        }

        loadModel("/assets/3dmodels/megaminx.glb", [0, 0, 0], [3.5, 3.5, 3.5]);

        function updateCameraAndRendererSize() {
            if ($cubes) {
                const width = $cubes.offsetWidth;
                const height = $cubes.offsetHeight;
                renderer.setSize(width, height);
                camera.position.z = 30;
                camera.aspect = width / height;
                camera.updateProjectionMatrix();
            }
        }

        function animate() {
            requestAnimationFrame(animate);

            if (models.length > 0) {
                const time = Date.now() * 0.001;
                models.forEach((model) => {
                    model.rotation.y = time * 0.5;
                    model.rotation.x = time * -0.5;
                });
            }

            renderer.render(scene, camera);
        }

        window.addEventListener('resize', () => {
            updateCameraAndRendererSize();
        });

        updateCameraAndRendererSize();
        animate();
    }
</script>
